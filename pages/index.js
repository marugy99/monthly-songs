import Head from "next/head";
import React from "react";
import axios from "axios";

export default function Home() {
    const CLIENT_ID = process.env.NEXT_PUBLIC_SPOTIFY_CLIENT_ID;
    const CLIENT_SECRET = process.env.NEXT_PUBLIC_SPOTIFY_CLIENT_SECRET;

    const [accessToken, setAccessToken] = React.useState("");
    const [allTracks, setAllTracks] = React.useState([]);
    const [filteredTracks, setFilteredTracks] = React.useState([]);

    const months = [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December",
    ];
    const readableMonth = new Date().toLocaleString("en-US", { month: "long" });

    const [selectedMonth, setSelectedMonth] = React.useState(readableMonth);
    const [selectedYear, setSelectedYear] = React.useState(
        new Date().getFullYear()
    );

    const ref = React.useRef(null);

    const getPlaylist = async (token, offset = 0) => {
        const tracks = await axios
            .get(
                `https://api.spotify.com/v1/playlists/7nBNEDwJikMF3Ni1owYROL/tracks?offset=${offset}`,
                {
                    headers: {
                        "Content-Type": "application/json",
                        Authorization: "Bearer " + token,
                    },
                }
            )
            .then(({ data }) => data)
            .catch((error) => {
                console.log(error);
            });

        return tracks;
    };

    React.useEffect(() => {
        async function init() {
            await axios
                .post(
                    "https://accounts.spotify.com/api/token",
                    "grant_type=client_credentials&client_id=" +
                        CLIENT_ID +
                        "&client_secret=" +
                        CLIENT_SECRET,
                    {
                        headers: {
                            "Content-Type": "application/x-www-form-urlencoded",
                        },
                    }
                )
                .then(async ({ data }) => {
                    setAccessToken(data.access_token);
                    const firstPage = await getPlaylist(data.access_token);

                    if (!firstPage.next) {
                        setAllTracks(firstPage.items);
                        return;
                    }

                    const pages = Math.ceil(firstPage.total / 100);
                    const tracks = [...firstPage.items];

                    for (
                        let step = 1;
                        step <= pages && step * 100 <= firstPage.total;
                        step++
                    ) {
                        const result = await getPlaylist(
                            data.access_token,
                            step * 100
                        );
                        if (result.items) tracks.push(...result.items);
                    }
                    setAllTracks(tracks);
                })
                .catch((error) => {
                    console.log(error);
                });
        }
        init();
    }, []);

    const getTracks = async () => {
        if (!selectedMonth || !selectedYear) return;

        const parsedMonth =
            new Date(
                Date.parse(selectedMonth + " 1, " + selectedYear)
            ).getMonth() + 1;

        const monthTracks = allTracks.filter((track) => {
            const [year, month] = track.added_at.split("-");
            return parsedMonth === +month && selectedYear == year;
        });
        setFilteredTracks(monthTracks);
    };

    const copyPageContent = () => {
        const clipboardItem = new ClipboardItem({
            "text/plain": new Blob([ref.current.innerText], {
                type: "text/plain",
            }),
            "text/html": new Blob([ref.current.outerHTML], {
                type: "text/html",
            }),
        });
        navigator.clipboard.write([clipboardItem]);
    };

    const getYears = () => {
        const startYear = new Date(2023, 0).getFullYear();
        const currentYear = new Date().getFullYear();
        const years = [];

        let mutableYear;

        for (let step = 0; mutableYear !== currentYear; step++) {
            mutableYear = startYear + step;
            years.push(mutableYear.toString());
        }
        return years;
    };

    return (
        <div>
            <Head>
                <title>Spotify Monthly Report</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link
                    rel="icon"
                    href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>ðŸŽ§</text></svg>"
                ></link>
            </Head>

            <main className="container mx-auto py-6 text-gray-700">
                <h1 className="text-2xl font-bold">
                    Maru Spotify Monthly Summary
                </h1>

                <div className="flex items-center gap-4">
                    <select
                        defaultValue={selectedMonth}
                        onChange={(e) => setSelectedMonth(e.target.value)}
                    >
                        {months.map((month) => (
                            <option key={month} value={month}>
                                {month}
                            </option>
                        ))}
                    </select>

                    <select
                        defaultValue={selectedYear}
                        onChange={(e) => setSelectedYear(e.target.value)}
                    >
                        {getYears().map((year) => (
                            <option key={year} value={year}>
                                {year}
                            </option>
                        ))}
                    </select>

                    {allTracks.length > 0 ? (
                        <button
                            onClick={getTracks}
                            className="p-2 rounded-lg bg-violet-600 text-white mt-2"
                        >
                            Get tracks
                        </button>
                    ) : (
                        <p>Loading...</p>
                    )}
                    {filteredTracks.length > 0 && (
                        <button
                            onClick={copyPageContent}
                            className="p-2 rounded-lg bg-gray-600 text-white mt-2"
                        >
                            Copy content
                        </button>
                    )}
                </div>
                <ul ref={ref} className="grid grid-cols-2 gap-4 mt-4">
                    {filteredTracks.map((track, index) => (
                        <li
                            key={index}
                            className="flex flex-row-reverse items-center gap-4 justify-end"
                        >
                            <p>
                                <span className="font-bold">
                                    {track.track.artists[0].name}:{" "}
                                </span>
                                {track.track.name}
                            </p>
                            <img
                                alt="Track cover"
                                src={track.track.album.images[0].url}
                                width="120px"
                                height="120px"
                                className="rounded-lg aspect-square w-24 h-24"
                            />
                        </li>
                    ))}
                </ul>
            </main>
        </div>
    );
}
